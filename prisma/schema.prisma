generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  searches      Search[]
  comments      Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Search {
  id        String   @id @default(cuid())
  query     String
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  trends    Trend[]

  @@index([query])
}

model Trend {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  url         String
  platform    Platform
  authorName  String?
  publishedAt DateTime
  engagement  Int       @default(0)
  sentiment   Sentiment @default(NEUTRAL)
  searchId    String
  search      Search    @relation(fields: [searchId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@index([platform])
  @@index([sentiment])
  @@index([engagement])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trendId   String
  trend     Trend    @relation(fields: [trendId], references: [id], onDelete: Cascade)
}

enum Platform {
  YOUTUBE
  REDDIT
  TWITTER
}

enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

